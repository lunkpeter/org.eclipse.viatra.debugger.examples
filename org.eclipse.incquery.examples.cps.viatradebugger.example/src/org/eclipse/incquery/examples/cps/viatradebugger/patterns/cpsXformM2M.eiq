package org.eclipse.incquery.examples.cps.xform.m2m.incr.viatra.patterns

import "http://org.eclipse.incquery/model/cps"
import "http://org.eclipse.incquery/model/deployment"
import "http://org.eclipse.incquery/model/cps-traceability"

import java org.eclipse.incquery.examples.cps.xform.m2m.util.SignalUtil

pattern mappedCPS(cps2dep, cps, deployment) {
	CPSToDeployment.cps(cps2dep, cps);
	CPSToDeployment.deployment(cps2dep, deployment);
}


pattern cps2depTrace(cps2dep, trace, cpsElement, depElement) {
	CPSToDeployment.traces(cps2dep, trace);
	CPS2DeplyomentTrace.cpsElements(trace, cpsElement);
	CPS2DeplyomentTrace.deploymentElements(trace, depElement);
}

@Item(item = hostType, label = "HOST TYPE : $hostType.id$")
pattern hostType(hostType) {
	HostType(hostType);
}

@Item(item = hostInstance, label = "HOST INSTANCE : $hostInstance.id$ : $hostInstance.nodeIp$")
pattern hostInstance(hostInstance) {
	HostInstance(hostInstance);
}

@Item(item = appInstance, label = "APP INSTANCE : $appInstance.id$")
pattern appInstance(appInstance) {
	ApplicationInstance(appInstance);
}

@Edge(source = hostType, target = hostInstance)
pattern hostTypeInstanceLink(hostType, hostInstance){
	HostType.instances(hostType, hostInstance);
}

@Edge(source = hostInstance, target = appInstance)
pattern hostAppLink(hostInstance, appInstance){
	HostInstance.applications(hostInstance, appInstance);
}


@Item(item = depHost, label = "DEPLOYMENT HOST : $depHost.ip$")
@Format(color = "#00ff00")
pattern deploymentHost(depHost) {
	DeploymentHost(depHost);
}

@Edge(source = cpsElement, target = depElement)
pattern traceRelation(cpsElement, depElement){
	CPSToDeployment.traces(_, trace);
	CPS2DeplyomentTrace.cpsElements(trace, cpsElement);
	CPS2DeplyomentTrace.deploymentElements(trace, depElement);
}

pattern applicationInstance(appType, appInstance){
	HostInstance.applications(_, appInstance);
	ApplicationType.instances(appType, appInstance);
}

pattern stateMachine(appInstance, stateMachine) {
	find applicationInstance(appType, appInstance);
	ApplicationType.behavior(appType, stateMachine);
}

pattern state(appInstance, stateMachine, state) {
	find stateMachine(appInstance, stateMachine);
	StateMachine.states(stateMachine, state);
}

pattern transition(appInstance, srcState, targetState, transition) {
	find state(appInstance, stateMachine, srcState);
	State.outgoingTransitions(srcState, transition);
	Transition.targetState(transition, targetState);
	StateMachine.states(stateMachine, targetState);
}

pattern depBehaviorsStateAndTransitions(depBehavior, depState, depTransition) {
	DeploymentBehavior.states(depBehavior, depState);
	DeploymentBehavior.transitions(depBehavior, depTransition);
}

pattern allocatedDeploymentApplication(depHost, depApp) {
	DeploymentHost.applications(depHost, depApp);
}

pattern applicationInstanceWithHost(appType, appInstance, host) {
	find applicationInstance(appType, appInstance);
	ApplicationInstance.allocatedTo(appInstance, host);
}

pattern sendTransitionAppSignal(transition, app, appType, signal) {
 	ApplicationType.behavior(appType, stateMachine);
	StateMachine.states(stateMachine, source);
	State.outgoingTransitions(source, transition);
 	Transition.action(transition, action);
 	app == eval(SignalUtil.getAppId(action));
 	signal == eval(SignalUtil.getSignalId(action));
}

pattern waitTransitionAppSignal(transition, appType, signal) {
 	ApplicationType.behavior(appType, stateMachine);
	StateMachine.states(stateMachine, source);
	State.outgoingTransitions(source, transition);
 	Transition.action(transition, action);
 	check(
 		SignalUtil.isWait(action)
 	);
 	signal == eval(SignalUtil.getSignalId(action));
}

pattern hostFromTransition(appType, appInstance, transition, hostInstance) {
	find appInstanceTransition(appInstance, transition);
	find applicationInstanceWithHost(appType, appInstance, hostInstance);
}

private pattern triggerPairWithoutReachability(sourceHostInstance, targetHostInstance, appInstanceTrigger, appInstanceTarget, cpsTrigger, cpsTarget) {
	find sendTransitionAppSignal(cpsTrigger, appId, triggerApp, signal);
	find waitTransitionAppSignal(cpsTarget, waitApp, signal);
	ApplicationType.id(waitApp, appId);
	
	find hostFromTransition(triggerApp, appInstanceTrigger, cpsTrigger, sourceHostInstance);	
	find hostFromTransition(waitApp, appInstanceTarget, cpsTarget, targetHostInstance);
}

pattern triggerPair(sourceHostInstance, targetHostInstance, appInstanceTrigger, appInstanceTarget, cpsTrigger, cpsTarget) {
	find triggerPairWithoutReachability(sourceHostInstance, targetHostInstance, appInstanceTrigger, appInstanceTarget, cpsTrigger, cpsTarget);		
	find reachableHosts(sourceHostInstance, targetHostInstance);
}

pattern appInstanceTransition(appInstance, transition) {
	find applicationInstance(appType, appInstance);
	ApplicationType.behavior.states.outgoingTransitions(appType, transition);
}

pattern communicatingAppInstances(sourceAppInstance, targetAppInstance) {
	find applicationInstanceWithHost(_, sourceAppInstance, sourceHostInstance);
	find applicationInstanceWithHost(_, targetAppInstance, targetHostInstance);
	find reachableHosts(sourceHostInstance, targetHostInstance);
}

pattern hostCommunication(fromHost, toHost) {
	HostInstance.communicateWith(fromHost, toHost);
}

pattern reachableHosts(source, target) {
	find hostCommunication(source, target);
} or {
	HostInstance(source);
	HostInstance(target);
	source == target;
}